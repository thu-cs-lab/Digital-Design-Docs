/* Generated by Yosys 0.16+6 (git sha1 e0ba32423, clang 11.0.1-2 -fPIC -Os) */

module counter(clock, reset, button_debounced, ones, tens);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  (* force_downto = 32'd1 *)
  (* src = "/usr/local/bin/../share/yosys/techmap.v:270.23-270.24" *)
  wire [3:0] _19_;
  (* force_downto = 32'd1 *)
  (* src = "/usr/local/bin/../share/yosys/techmap.v:270.26-270.27" *)
  wire [3:0] _20_;
  input button_debounced;
  wire button_debounced;
  reg button_debounced_reg;
  input clock;
  wire clock;
  output [3:0] ones;
  wire [3:0] ones;
  reg [3:0] ones_reg;
  input reset;
  wire reset;
  output [3:0] tens;
  wire [3:0] tens;
  reg [3:0] tens_reg;
  assign _19_[0] = ~tens_reg[0];
  assign _01_ = ~ones_reg[0];
  assign _06_ = ~ones_reg[2];
  assign _07_ = ~button_debounced_reg;
  assign _08_ = ~(_01_ & ones_reg[1]);
  assign _09_ = _06_ & ones_reg[3];
  assign _10_ = ~(_06_ & ones_reg[3]);
  assign _11_ = ~(_01_ | ones_reg[1]);
  assign _12_ = ~(_10_ & _11_);
  assign _13_ = ones_reg[0] & ones_reg[1];
  assign _02_ = ~(_08_ & _12_);
  assign _14_ = ~(ones_reg[2] & _13_);
  assign _03_ = ones_reg[2] ^ _13_;
  assign _15_ = _09_ & _11_;
  assign _16_ = ones_reg[3] ^ _14_;
  assign _04_ = ~(_15_ | _16_);
  assign _00_ = button_debounced & _07_;
  assign _05_ = _15_ & _00_;
  assign _17_ = tens_reg[0] & tens_reg[1];
  assign _20_[1] = tens_reg[0] ^ tens_reg[1];
  assign _18_ = tens_reg[2] & _17_;
  assign _20_[2] = tens_reg[2] ^ _17_;
  assign _20_[3] = tens_reg[3] ^ _18_;
  always @(posedge clock)
    if (reset) button_debounced_reg <= 1'h0;
    else button_debounced_reg <= button_debounced;
  always @(posedge clock)
    if (reset) ones_reg[0] <= 1'h0;
    else if (_00_) ones_reg[0] <= _01_;
  always @(posedge clock)
    if (reset) ones_reg[1] <= 1'h0;
    else if (_00_) ones_reg[1] <= _02_;
  always @(posedge clock)
    if (reset) ones_reg[2] <= 1'h0;
    else if (_00_) ones_reg[2] <= _03_;
  always @(posedge clock)
    if (reset) ones_reg[3] <= 1'h0;
    else if (_00_) ones_reg[3] <= _04_;
  always @(posedge clock)
    if (reset) tens_reg[0] <= 1'h0;
    else if (_05_) tens_reg[0] <= _19_[0];
  always @(posedge clock)
    if (reset) tens_reg[1] <= 1'h0;
    else if (_05_) tens_reg[1] <= _20_[1];
  always @(posedge clock)
    if (reset) tens_reg[2] <= 1'h0;
    else if (_05_) tens_reg[2] <= _20_[2];
  always @(posedge clock)
    if (reset) tens_reg[3] <= 1'h0;
    else if (_05_) tens_reg[3] <= _20_[3];
  assign _19_[3:1] = tens_reg[3:1];
  assign _20_[0] = _19_[0];
  assign ones = ones_reg;
  assign tens = tens_reg;
endmodule

module counter_top(clock, reset, button, ones, tens);
  input button;
  wire button;
  wire button_debounced;
  input clock;
  wire clock;
  output [3:0] ones;
  wire [3:0] ones;
  input reset;
  wire reset;
  output [3:0] tens;
  wire [3:0] tens;
  counter counter_component (
    .button_debounced(button_debounced),
    .clock(clock),
    .ones(ones),
    .reset(reset),
    .tens(tens)
  );
  debouncer debouncer_component (
    .button(button),
    .button_debounced(button_debounced),
    .clock(clock),
    .reset(reset)
  );
endmodule

module debouncer(clock, reset, button, button_debounced);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  (* force_downto = 32'd1 *)
  (* src = "/usr/local/bin/../share/yosys/techmap.v:270.23-270.24" *)
  wire [15:0] _035_;
  (* force_downto = 32'd1 *)
  (* src = "/usr/local/bin/../share/yosys/techmap.v:270.26-270.27" *)
  wire [15:0] _036_;
  input button;
  wire button;
  output button_debounced;
  wire button_debounced;
  reg button_debounced_reg;
  input clock;
  wire clock;
  reg [15:0] counter_reg;
  reg last_button_reg;
  input reset;
  wire reset;
  assign _035_[0] = ~counter_reg[0];
  assign _003_ = ~counter_reg[5];
  assign _004_ = ~counter_reg[11];
  assign _005_ = ~counter_reg[12];
  assign _006_ = last_button_reg ^ button;
  assign _001_ = reset | _006_;
  assign _007_ = _003_ & counter_reg[4];
  assign _008_ = ~(counter_reg[7] | counter_reg[6]);
  assign _009_ = _007_ & _008_;
  assign _010_ = ~(counter_reg[1] | counter_reg[0]);
  assign _011_ = ~(counter_reg[3] | counter_reg[2]);
  assign _012_ = _010_ & _011_;
  assign _013_ = _009_ & _012_;
  assign _014_ = _005_ & counter_reg[13];
  assign _015_ = ~(counter_reg[15] | counter_reg[14]);
  assign _016_ = _014_ & _015_;
  assign _017_ = counter_reg[9] & counter_reg[8];
  assign _018_ = _004_ & counter_reg[10];
  assign _019_ = _017_ & _018_;
  assign _020_ = _016_ & _019_;
  assign _002_ = ~(_013_ & _020_);
  assign _000_ = ~(_006_ | _002_);
  assign _021_ = counter_reg[1] & counter_reg[0];
  assign _036_[1] = ~(_010_ | _021_);
  assign _022_ = counter_reg[2] & _021_;
  assign _036_[2] = counter_reg[2] ^ _021_;
  assign _023_ = counter_reg[3] & _022_;
  assign _036_[3] = counter_reg[3] ^ _022_;
  assign _024_ = counter_reg[4] & _023_;
  assign _036_[4] = counter_reg[4] ^ _023_;
  assign _025_ = counter_reg[5] & _024_;
  assign _036_[5] = counter_reg[5] ^ _024_;
  assign _026_ = counter_reg[6] & _025_;
  assign _036_[6] = counter_reg[6] ^ _025_;
  assign _027_ = counter_reg[7] & _026_;
  assign _036_[7] = counter_reg[7] ^ _026_;
  assign _028_ = counter_reg[8] & _027_;
  assign _036_[8] = counter_reg[8] ^ _027_;
  assign _029_ = counter_reg[9] & _028_;
  assign _036_[9] = counter_reg[9] ^ _028_;
  assign _030_ = counter_reg[10] & _029_;
  assign _036_[10] = counter_reg[10] ^ _029_;
  assign _031_ = counter_reg[11] & _030_;
  assign _036_[11] = counter_reg[11] ^ _030_;
  assign _032_ = counter_reg[12] & _031_;
  assign _036_[12] = counter_reg[12] ^ _031_;
  assign _033_ = counter_reg[13] & _032_;
  assign _036_[13] = counter_reg[13] ^ _032_;
  assign _034_ = counter_reg[14] & _033_;
  assign _036_[14] = counter_reg[14] ^ _033_;
  assign _036_[15] = counter_reg[15] ^ _034_;
  always @(posedge clock)
    if (_001_) counter_reg[0] <= 1'h0;
    else if (_002_) counter_reg[0] <= _035_[0];
  always @(posedge clock)
    if (_001_) counter_reg[1] <= 1'h0;
    else if (_002_) counter_reg[1] <= _036_[1];
  always @(posedge clock)
    if (_001_) counter_reg[2] <= 1'h0;
    else if (_002_) counter_reg[2] <= _036_[2];
  always @(posedge clock)
    if (_001_) counter_reg[3] <= 1'h0;
    else if (_002_) counter_reg[3] <= _036_[3];
  always @(posedge clock)
    if (_001_) counter_reg[4] <= 1'h0;
    else if (_002_) counter_reg[4] <= _036_[4];
  always @(posedge clock)
    if (_001_) counter_reg[5] <= 1'h0;
    else if (_002_) counter_reg[5] <= _036_[5];
  always @(posedge clock)
    if (_001_) counter_reg[6] <= 1'h0;
    else if (_002_) counter_reg[6] <= _036_[6];
  always @(posedge clock)
    if (_001_) counter_reg[7] <= 1'h0;
    else if (_002_) counter_reg[7] <= _036_[7];
  always @(posedge clock)
    if (_001_) counter_reg[8] <= 1'h0;
    else if (_002_) counter_reg[8] <= _036_[8];
  always @(posedge clock)
    if (_001_) counter_reg[9] <= 1'h0;
    else if (_002_) counter_reg[9] <= _036_[9];
  always @(posedge clock)
    if (_001_) counter_reg[10] <= 1'h0;
    else if (_002_) counter_reg[10] <= _036_[10];
  always @(posedge clock)
    if (_001_) counter_reg[11] <= 1'h0;
    else if (_002_) counter_reg[11] <= _036_[11];
  always @(posedge clock)
    if (_001_) counter_reg[12] <= 1'h0;
    else if (_002_) counter_reg[12] <= _036_[12];
  always @(posedge clock)
    if (_001_) counter_reg[13] <= 1'h0;
    else if (_002_) counter_reg[13] <= _036_[13];
  always @(posedge clock)
    if (_001_) counter_reg[14] <= 1'h0;
    else if (_002_) counter_reg[14] <= _036_[14];
  always @(posedge clock)
    if (_001_) counter_reg[15] <= 1'h0;
    else if (_002_) counter_reg[15] <= _036_[15];
  always @(posedge clock)
    if (reset) button_debounced_reg <= 1'h0;
    else if (_000_) button_debounced_reg <= last_button_reg;
  always @(posedge clock)
    if (reset) last_button_reg <= 1'h0;
    else last_button_reg <= button;
  assign _035_[15:1] = counter_reg[15:1];
  assign _036_[0] = _035_[0];
  assign button_debounced = button_debounced_reg;
endmodule
