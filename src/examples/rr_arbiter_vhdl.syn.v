/* Generated by Yosys 0.16+6 (git sha1 e0ba32423, clang 11.0.1-2 -fPIC -Os) */

module rr_arbiter(clock, reset, request, valid, user);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  input clock;
  wire clock;
  wire [1:0] priority_encoder_user_comb;
  wire priority_encoder_valid_comb;
  input [3:0] request;
  wire [3:0] request;
  input reset;
  wire reset;
  output [1:0] user;
  wire [1:0] user;
  reg [1:0] user_reg;
  output valid;
  wire valid;
  reg valid_reg;
  assign _01_ = ~user_reg[0];
  assign _02_ = ~(request[0] & _01_);
  assign _03_ = request[1] & user_reg[0];
  assign _04_ = ~(user_reg[1] | _03_);
  assign _05_ = ~(_02_ & _04_);
  assign _06_ = ~(_01_ & request[2]);
  assign _07_ = ~(user_reg[0] & request[3]);
  assign _08_ = user_reg[1] & _07_;
  assign _09_ = ~(_06_ & _08_);
  assign _10_ = valid_reg & _05_;
  assign _11_ = ~(_09_ & _10_);
  assign _00_ = priority_encoder_valid_comb & _11_;
  assign user[0] = priority_encoder_user_comb[0] & _00_;
  assign user[1] = priority_encoder_user_comb[1] & _00_;
  always @(posedge clock)
    if (reset) user_reg[0] <= 1'h0;
    else if (_00_) user_reg[0] <= priority_encoder_user_comb[0];
  always @(posedge clock)
    if (reset) user_reg[1] <= 1'h0;
    else if (_00_) user_reg[1] <= priority_encoder_user_comb[1];
  always @(posedge clock)
    if (reset) valid_reg <= 1'h0;
    else valid_reg <= priority_encoder_valid_comb;
  rr_priority_encoder rr_priority_encoder_component (
    .last_user(user_reg),
    .request(request),
    .user(priority_encoder_user_comb),
    .valid(priority_encoder_valid_comb)
  );
  assign valid = priority_encoder_valid_comb;
endmodule

module rr_priority_encoder(request, last_user, valid, user);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  input [1:0] last_user;
  wire [1:0] last_user;
  input [3:0] request;
  wire [3:0] request;
  output [1:0] user;
  wire [1:0] user;
  output valid;
  wire valid;
  assign _00_ = ~request[1];
  assign _01_ = ~last_user[0];
  assign _02_ = ~(request[2] | request[3]);
  assign _03_ = ~(request[1] | request[0]);
  assign valid = ~(_02_ & _03_);
  assign _04_ = request[0] & last_user[1];
  assign _05_ = ~(_01_ & last_user[1]);
  assign _06_ = last_user[0] ^ last_user[1];
  assign _07_ = ~(_04_ | _06_);
  assign _08_ = ~(request[1] & _07_);
  assign _09_ = ~(_00_ | request[0]);
  assign _10_ = request[3] | _09_;
  assign _11_ = request[2] | _04_;
  assign _12_ = ~(_05_ & _11_);
  assign _13_ = ~(_10_ & _12_);
  assign user[0] = ~(_08_ & _13_);
  assign _14_ = ~(_00_ & _07_);
  assign _15_ = request[3] | last_user[0];
  assign _16_ = _03_ | _15_;
  assign _17_ = ~(_06_ & _16_);
  assign _18_ = _14_ & _17_;
  assign user[1] = ~(_02_ | _18_);
endmodule
