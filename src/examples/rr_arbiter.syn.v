/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, clang 11.0.1-2 -fPIC -Os) */

(* src = "examples/rr_arbiter.v:101.1-159.10" *)
module rr_arbiter(clock, reset, request, valid, user);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  (* src = "examples/rr_arbiter.v:102.9-102.14" *)
  input clock;
  wire clock;
  (* src = "examples/rr_arbiter.v:113.13-113.39" *)
  wire [1:0] priority_encoder_user_comb;
  (* src = "examples/rr_arbiter.v:105.15-105.22" *)
  input [3:0] request;
  wire [3:0] request;
  (* src = "examples/rr_arbiter.v:103.9-103.14" *)
  input reset;
  wire reset;
  (* src = "examples/rr_arbiter.v:107.16-107.20" *)
  output [1:0] user;
  wire [1:0] user;
  (* src = "examples/rr_arbiter.v:112.13-112.22" *)
  wire [1:0] user_comb;
  (* src = "examples/rr_arbiter.v:109.13-109.21" *)
  reg [1:0] user_reg;
  (* src = "examples/rr_arbiter.v:106.10-106.15" *)
  output valid;
  wire valid;
  (* src = "examples/rr_arbiter.v:110.7-110.16" *)
  reg valid_reg;
  assign _01_ = ~valid;
  assign _02_ = ~user_reg[0];
  assign _03_ = ~(user_reg[0] & request[3]);
  assign _04_ = ~(_02_ & request[2]);
  assign _05_ = ~(_03_ & _04_);
  assign _06_ = ~(user_reg[1] & _05_);
  assign _07_ = ~(request[1] & user_reg[0]);
  assign _08_ = ~(request[0] & _02_);
  assign _09_ = _07_ & _08_;
  assign _10_ = user_reg[1] | _09_;
  assign _11_ = ~(_06_ & _10_);
  assign _12_ = ~(valid_reg & _11_);
  assign _00_ = valid & _12_;
  assign _13_ = ~(_01_ | _12_);
  assign _14_ = ~(user_reg[0] & _13_);
  assign _15_ = ~(priority_encoder_user_comb[0] & _00_);
  assign user[0] = ~(_14_ & _15_);
  assign _16_ = ~(user_reg[1] & _13_);
  assign _17_ = ~(priority_encoder_user_comb[1] & _00_);
  assign user[1] = ~(_16_ & _17_);
  (* src = "examples/rr_arbiter.v:123.3-139.6" *)
  always @(posedge clock)
    if (reset) valid_reg <= 1'h0;
    else valid_reg <= valid;
  (* src = "examples/rr_arbiter.v:123.3-139.6" *)
  always @(posedge clock)
    if (reset) user_reg[0] <= 1'h0;
    else if (_00_) user_reg[0] <= priority_encoder_user_comb[0];
  (* src = "examples/rr_arbiter.v:123.3-139.6" *)
  always @(posedge clock)
    if (reset) user_reg[1] <= 1'h0;
    else if (_00_) user_reg[1] <= priority_encoder_user_comb[1];
  (* module_not_derived = 32'd1 *)
  (* src = "examples/rr_arbiter.v:115.23-120.4" *)
  rr_priority_encoder rr_priority_encoder_inst (
    .last_user(user_reg),
    .request(request),
    .user(priority_encoder_user_comb),
    .valid(valid)
  );
  assign user_comb = user;
endmodule

(* src = "examples/rr_arbiter.v:1.1-99.10" *)
module rr_priority_encoder(request, last_user, valid, user);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  (* src = "examples/rr_arbiter.v:3.15-3.24" *)
  input [1:0] last_user;
  wire [1:0] last_user;
  (* src = "examples/rr_arbiter.v:2.15-2.22" *)
  input [3:0] request;
  wire [3:0] request;
  (* src = "examples/rr_arbiter.v:5.16-5.20" *)
  output [1:0] user;
  wire [1:0] user;
  (* src = "examples/rr_arbiter.v:8.13-8.22" *)
  wire [1:0] user_comb;
  (* src = "examples/rr_arbiter.v:4.10-4.15" *)
  output valid;
  wire valid;
  (* src = "examples/rr_arbiter.v:7.7-7.17" *)
  wire valid_comb;
  assign _00_ = ~request[2];
  assign _01_ = ~last_user[0];
  assign _02_ = ~last_user[1];
  assign _03_ = ~(request[3] & _00_);
  assign _04_ = ~(last_user[0] & _03_);
  assign _05_ = ~(_02_ & _04_);
  assign _06_ = request[2] & _02_;
  assign _07_ = request[0] | _06_;
  assign _08_ = ~(request[3] & _01_);
  assign _09_ = _07_ & _08_;
  assign _10_ = ~(_05_ & _09_);
  assign _11_ = _02_ | _08_;
  assign _12_ = ~(_03_ & _11_);
  assign _13_ = request[1] | _12_;
  assign user[0] = _10_ & _13_;
  assign _14_ = request[3] | request[2];
  assign _15_ = request[0] | request[1];
  assign _16_ = ~(_08_ & _15_);
  assign _17_ = ~(last_user[1] & _16_);
  assign _18_ = ~(request[1] & _01_);
  assign _19_ = ~(_02_ & _18_);
  assign _20_ = ~(_17_ & _19_);
  assign user[1] = _14_ & _20_;
  assign valid = _14_ | _15_;
  assign user_comb = user;
  assign valid_comb = valid;
endmodule
