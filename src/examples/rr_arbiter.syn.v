/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, clang 11.0.1-2 -fPIC -Os) */

(* top =  1  *)
(* src = "examples/rr_arbiter.v:101.1-159.10" *)
module rr_arbiter(clock, reset, request, valid, user);
  (* src = "examples/rr_arbiter.v:123.3-139.6" *)
  wire [1:0] _00_;
  (* src = "examples/rr_arbiter.v:123.3-139.6" *)
  wire _01_;
  (* src = "examples/rr_arbiter.v:142.3-155.6" *)
  wire [1:0] _02_;
  (* src = "examples/rr_arbiter.v:142.3-155.6" *)
  wire [1:0] _03_;
  (* src = "examples/rr_arbiter.v:129.11-129.30" *)
  wire _04_;
  (* src = "examples/rr_arbiter.v:132.20-132.59" *)
  wire _05_;
  (* src = "examples/rr_arbiter.v:132.20-132.38" *)
  wire _06_;
  (* src = "examples/rr_arbiter.v:134.20-134.60" *)
  wire _07_;
  (* src = "examples/rr_arbiter.v:129.11-129.21" *)
  wire _08_;
  (* src = "examples/rr_arbiter.v:134.42-134.60" *)
  wire _09_;
  wire [1:0] _10_;
  wire [1:0] _11_;
  wire [1:0] _12_;
  (* src = "examples/rr_arbiter.v:0.0-0.0" *)
  wire _13_;
  (* src = "examples/rr_arbiter.v:102.9-102.14" *)
  input clock;
  wire clock;
  (* src = "examples/rr_arbiter.v:113.13-113.39" *)
  wire [1:0] priority_encoder_user_comb;
  (* src = "examples/rr_arbiter.v:105.15-105.22" *)
  input [3:0] request;
  wire [3:0] request;
  (* src = "examples/rr_arbiter.v:103.9-103.14" *)
  input reset;
  wire reset;
  (* src = "examples/rr_arbiter.v:107.16-107.20" *)
  output [1:0] user;
  wire [1:0] user;
  (* src = "examples/rr_arbiter.v:112.13-112.22" *)
  wire [1:0] user_comb;
  (* src = "examples/rr_arbiter.v:109.13-109.21" *)
  reg [1:0] user_reg;
  (* src = "examples/rr_arbiter.v:106.10-106.15" *)
  output valid;
  wire valid;
  (* src = "examples/rr_arbiter.v:110.7-110.16" *)
  reg valid_reg;
  assign _04_ = _08_ && (* src = "examples/rr_arbiter.v:129.11-129.30" *) valid;
  assign _06_ = valid_reg && (* src = "examples/rr_arbiter.v:132.20-132.38" *) valid;
  assign _07_ = _06_ && (* src = "examples/rr_arbiter.v:134.20-134.60" *) _09_;
  assign _05_ = _06_ && (* src = "examples/rr_arbiter.v:148.18-148.57" *) _13_;
  assign _08_ = ! (* src = "examples/rr_arbiter.v:129.11-129.21" *) valid_reg;
  assign _09_ = ! (* src = "examples/rr_arbiter.v:134.42-134.60" *) _13_;
  (* src = "examples/rr_arbiter.v:123.3-139.6" *)
  always @(posedge clock)
    user_reg <= _00_;
  (* src = "examples/rr_arbiter.v:123.3-139.6" *)
  always @(posedge clock)
    valid_reg <= _01_;
  assign _03_ = _07_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:151.18-151.58|examples/rr_arbiter.v:151.14-154.8" *) priority_encoder_user_comb : 2'h0;
  assign _02_ = _05_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:148.18-148.57|examples/rr_arbiter.v:148.14-154.8" *) user_reg : _03_;
  assign user = _04_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:145.9-145.28|examples/rr_arbiter.v:145.5-154.8" *) priority_encoder_user_comb : _02_;
  assign _01_ = reset ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:124.9-124.14|examples/rr_arbiter.v:124.5-138.8" *) 1'h0 : valid;
  assign _10_ = _07_ ? (* src = "examples/rr_arbiter.v:134.20-134.60|examples/rr_arbiter.v:134.16-137.10" *) priority_encoder_user_comb : user_reg;
  assign _11_ = _05_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:132.20-132.59|examples/rr_arbiter.v:132.16-137.10" *) user_reg : _10_;
  assign _12_ = _04_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:129.11-129.30|examples/rr_arbiter.v:129.7-137.10" *) priority_encoder_user_comb : _11_;
  assign _00_ = reset ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:124.9-124.14|examples/rr_arbiter.v:124.5-138.8" *) 2'h0 : _12_;
  wire [3:0] _31_ = request;
  assign _13_ = _31_[user_reg +: 1];
  (* module_not_derived = 32'd1 *)
  (* src = "examples/rr_arbiter.v:115.23-120.4" *)
  rr_priority_encoder rr_priority_encoder_inst (
    .last_user(user_reg),
    .request(request),
    .user(priority_encoder_user_comb),
    .valid(valid)
  );
  assign user_comb = user;
endmodule

(* src = "examples/rr_arbiter.v:1.1-99.10" *)
module rr_priority_encoder(request, last_user, valid, user);
  (* src = "examples/rr_arbiter.v:10.3-94.6" *)
  wire [1:0] _00_;
  (* src = "examples/rr_arbiter.v:10.3-94.6" *)
  wire _01_;
  (* src = "examples/rr_arbiter.v:10.3-94.6" *)
  wire [1:0] _02_;
  (* src = "examples/rr_arbiter.v:10.3-94.6" *)
  wire _03_;
  (* src = "examples/rr_arbiter.v:10.3-94.6" *)
  wire [1:0] _04_;
  (* src = "examples/rr_arbiter.v:10.3-94.6" *)
  wire _05_;
  (* src = "examples/rr_arbiter.v:10.3-94.6" *)
  wire [1:0] _06_;
  (* src = "examples/rr_arbiter.v:10.3-94.6" *)
  wire _07_;
  (* src = "examples/rr_arbiter.v:10.3-94.6" *)
  wire [1:0] _08_;
  (* src = "examples/rr_arbiter.v:10.3-94.6" *)
  wire _09_;
  (* src = "examples/rr_arbiter.v:10.3-94.6" *)
  wire [1:0] _10_;
  (* src = "examples/rr_arbiter.v:10.3-94.6" *)
  wire _11_;
  (* src = "examples/rr_arbiter.v:10.3-94.6" *)
  wire [1:0] _12_;
  (* src = "examples/rr_arbiter.v:10.3-94.6" *)
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  (* src = "examples/rr_arbiter.v:16.9-16.26" *)
  wire _18_;
  (* src = "examples/rr_arbiter.v:35.18-35.35" *)
  wire _19_;
  (* src = "examples/rr_arbiter.v:54.18-54.35" *)
  wire _20_;
  (* src = "examples/rr_arbiter.v:73.18-73.35" *)
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  (* src = "examples/rr_arbiter.v:3.15-3.24" *)
  input [1:0] last_user;
  wire [1:0] last_user;
  (* src = "examples/rr_arbiter.v:2.15-2.22" *)
  input [3:0] request;
  wire [3:0] request;
  (* src = "examples/rr_arbiter.v:5.16-5.20" *)
  output [1:0] user;
  wire [1:0] user;
  (* src = "examples/rr_arbiter.v:8.13-8.22" *)
  wire [1:0] user_comb;
  (* src = "examples/rr_arbiter.v:4.10-4.15" *)
  output valid;
  wire valid;
  (* src = "examples/rr_arbiter.v:7.7-7.17" *)
  wire valid_comb;
  assign _14_ = | { _33_, _32_, _31_, _30_ };
  assign _15_ = | { _29_, _28_, _27_, _26_ };
  assign _16_ = | { _37_, _36_, _35_, _34_ };
  assign _17_ = | { _25_, _24_, _23_, _22_ };
  assign _18_ = last_user == (* src = "examples/rr_arbiter.v:16.9-16.26" *) 2'h3;
  assign _19_ = ! (* src = "examples/rr_arbiter.v:35.18-35.35" *) last_user;
  assign _20_ = last_user == (* src = "examples/rr_arbiter.v:54.18-54.35" *) 1'h1;
  assign _21_ = last_user == (* src = "examples/rr_arbiter.v:73.18-73.35" *) 2'h2;
  assign _11_ = _21_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:73.18-73.35|examples/rr_arbiter.v:73.14-92.8" *) _13_ : 1'h0;
  function [1:0] _47_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:55.7-72.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _47_ = b[1:0];
      3'b?1?:
        _47_ = b[3:2];
      3'b1??:
        _47_ = b[5:4];
      default:
        _47_ = a;
    endcase
  endfunction
  assign _08_ = _47_(2'h0, 6'h2d, { _24_, _23_, _22_ });
  assign _22_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:55.7-72.14" *) 2'h2;
  assign _23_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:55.7-72.14" *) 4'b10xx;
  assign _24_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:55.7-72.14" *) 4'bx1xx;
  assign _09_ = _17_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:55.7-72.14" *) 1'h1 : 1'h0;
  assign _25_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:55.7-72.14" *) 2'bx1;
  assign _06_ = _20_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:54.18-54.35|examples/rr_arbiter.v:54.14-92.8" *) _08_ : _10_;
  assign _07_ = _20_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:54.18-54.35|examples/rr_arbiter.v:54.14-92.8" *) _09_ : _11_;
  function [1:0] _55_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:36.7-53.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _55_ = b[1:0];
      3'b?1?:
        _55_ = b[3:2];
      3'b1??:
        _55_ = b[5:4];
      default:
        _55_ = a;
    endcase
  endfunction
  assign _04_ = _55_(2'h0, 6'h1b, { _28_, _27_, _26_ });
  assign _26_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:36.7-53.14" *) 4'b100x;
  assign _27_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:36.7-53.14" *) 4'bx10x;
  assign _28_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:36.7-53.14" *) 4'bxx1x;
  assign _05_ = _15_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:36.7-53.14" *) 1'h1 : 1'h0;
  assign _29_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:36.7-53.14" *) 1'h1;
  assign _02_ = _19_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:35.18-35.35|examples/rr_arbiter.v:35.14-92.8" *) _04_ : _06_;
  assign _03_ = _19_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:35.18-35.35|examples/rr_arbiter.v:35.14-92.8" *) _05_ : _07_;
  function [1:0] _63_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:17.7-34.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _63_ = b[1:0];
      3'b?1?:
        _63_ = b[3:2];
      3'b1??:
        _63_ = b[5:4];
      default:
        _63_ = a;
    endcase
  endfunction
  assign _00_ = _63_(2'h0, 6'h1b, { _32_, _31_, _30_ });
  assign _30_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:17.7-34.14" *) 4'h8;
  assign _31_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:17.7-34.14" *) 4'bx100;
  assign _32_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:17.7-34.14" *) 4'bxx10;
  assign _01_ = _14_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:17.7-34.14" *) 1'h1 : 1'h0;
  assign _33_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:17.7-34.14" *) 4'bxxx1;
  assign user = _18_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:16.9-16.26|examples/rr_arbiter.v:16.5-92.8" *) _00_ : _02_;
  assign valid = _18_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:16.9-16.26|examples/rr_arbiter.v:16.5-92.8" *) _01_ : _03_;
  function [1:0] _71_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:74.7-91.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _71_ = b[1:0];
      3'b?1?:
        _71_ = b[3:2];
      3'b1??:
        _71_ = b[5:4];
      default:
        _71_ = a;
    endcase
  endfunction
  assign _12_ = _71_(2'h0, 6'h36, { _36_, _35_, _34_ });
  assign _34_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:74.7-91.14" *) 3'h4;
  assign _35_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:74.7-91.14" *) 3'bx10;
  assign _36_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:74.7-91.14" *) 4'b1xxx;
  assign _13_ = _16_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:74.7-91.14" *) 1'h1 : 1'h0;
  assign _37_ = request == (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:0.0-0.0|examples/rr_arbiter.v:74.7-91.14" *) 3'bxx1;
  assign _10_ = _21_ ? (* full_case = 32'd1 *) (* src = "examples/rr_arbiter.v:73.18-73.35|examples/rr_arbiter.v:73.14-92.8" *) _12_ : 2'h0;
  assign user_comb = user;
  assign valid_comb = valid;
endmodule
